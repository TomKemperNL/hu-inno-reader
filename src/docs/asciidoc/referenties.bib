@article{wirfs_brock_rdd,
author = {Wirfs-Brock, R. and Wilkerson, B.},
title = {Object-oriented design: a responsibility-driven approach},
year = {1989},
issue_date = {Oct. 1989},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {24},
number = {10},
issn = {0362-1340},
url = {https://doi.org/10.1145/74878.74885},
doi = {10.1145/74878.74885},
abstract = {Object-oriented programming languages support encapsulation, thereby improving the ability of software to be reused, refined, tested, maintained, and extended. The full benefit of this support can only be realized if encapsulation is maximized during the design process.We argue that design practices which take a data-driven approach fail to maximize encapsulation because they focus too quickly on the implementation of objects. We propose an alternative object-oriented design method which takes a responsibility-driven approach. We show how such an approach can increase the encapsulation by deferring implementation issues until a later stage.},
journal = {SIGPLAN Not.},
month = {sep},
pages = {71–75},
numpages = {5}
}

@book{dawkins_meme,
  added-at = {2009-04-07T11:01:54.000+0200},
  author = {Dawkins, R},
  biburl = {https://www.bibsonomy.org/bibtex/2d1fac0b1967909865eaf7d12113a954d/selmarsmit},
  booktitle = {The Selfish Gene},
  date-modified = {2008-09-19 14:47:06 +0200},
  description = {Books},
  interhash = {0e376c87057d36d820970aa0965591c2},
  intrahash = {d1fac0b1967909865eaf7d12113a954d},
  keywords = {imported},
  publisher = {Oxford University Press, Oxford, UK},
  timestamp = {2009-04-07T11:01:55.000+0200},
  title = {The Selfish Gene},
  year = 1976
}


@book{evans_domain-driven_2004,
	title = {Domain-{Driven} {Design}: {Tackling} {Complexity} in the {Heart} of {Software}},
	publisher = {Addison-Wesley},
	author = {Evans, Eric},
	year = {2004},
	keywords = {ddd design domain driven dsl fluent interface},
}

@book{beck_test_2002,
	title = {Test {Driven} {Development}. {By} {Example} ({Addison}-{Wesley} {Signature})},
	isbn = {0-321-14653-0},
	publisher = {Addison-Wesley Longman, Amsterdam},
	author = {Beck, Kent},
	year = {2002},
	keywords = {addison-wesley books kent\_beck},
}

@book{newman_building_2015,
	title = {Building microservices - designing fine-grained systems, 1st {Edition}.},
	isbn = {978-1-4919-5035-7},
	publisher = {O'Reilly},
	author = {Newman, Sam},
	year = {2015},
	keywords = {dblp},
}

@book{vernon_implementing_2013,
	address = {Upper Saddle River, NJ},
	title = {Implementing {Domain}-{Driven} {Design}},
	isbn = {978-0-321-83457-7},
	url = {https://www.safaribooksonline.com/library/view/implementing-domain-driven-design/9780133039900/},
	abstract = {This book presents a top-down approach to understanding domain-driven design (DDD) in a way that fluently connects strategic patterns to fundamental tactical programming tools. Vaughn Vernon couples guided approaches to implementation with modern architectures, highlighting the importance and value of focusing on the business domain while balancing technical considerations. Building on Eric Evans’ seminal book, Domain-Driven Design, the author presents practical DDD techniques through examples from familiar domains. Each principle is backed up by realistic Java examples and all content is tied together by a single case study: the delivery of a large-scale Scrum-based SaaS system for a multitenant environment.},
	publisher = {Addison-Wesley},
	author = {Vernon, Vaughn},
	year = {2013},
	keywords = {01841 103 book safari software development architecture design code java},
}

@book{wlaschin_domain_2018,
	title = {Domain {Modeling} {Made} {Functional}: {Tackle} {Software} {Complexity} with {Domain}-{Driven} {Design} and {F}\#},
	isbn = {978-1-68050-549-8},
	url = {https://books.google.nl/books?id=qA9QDwAAQBAJ},
	publisher = {Pragmatic Bookshelf},
	author = {Wlaschin, S.},
	year = {2018},
}

@book{kleppmann_designing_2017,
	address = {Beijing},
	title = {Designing {Data}-{Intensive} {Applications}},
	isbn = {978-1-4493-7332-0},
	url = {https://www.safaribooksonline.com/library/view/designing-data-intensive-applications/9781491903063/},
	abstract = {Data is at the center of many challenges in system design today. Difficult issues need to be figured out, such as scalability, consistency, reliability, efficiency, and maintainability. In addition, we have an overwhelming variety of tools, including relational databases, NoSQL datastores, stream or batch processors, and message brokers. What are the right choices for your application? How do you make sense of all these buzzwords? In this practical and comprehensive guide, author Martin Kleppmann helps you navigate this diverse landscape by examining the pros and cons of various technologies for processing and storing data. Software keeps changing, but the fundamental principles remain the same.},
	publisher = {O'Reilly},
	author = {Kleppmann, Martin},
	year = {2017},
	keywords = {01841 103 safari book software development database architecture},
}

@book{petrov_database_2019,
	title = {Database {Internals}: {A} {Deep} {Dive} into {How} {Distributed} {Data} {Systems} {Work}},
	isbn = {978-1-4920-4031-6},
	url = {https://books.google.nl/books?id=-l2vDwAAQBAJ},
	publisher = {O'Reilly Media},
	author = {Petrov, A.},
	year = {2019},
}

@book{richards_ford_fundamentals,
	title = {Fundamentals of {Software} {Architecture}: {An} {Engineering} {Approach}},
	isbn = {978-1-4920-4345-4},
	url = {https://books.google.nl/books?id=\_pNdwgEACAAJ},
	publisher = {O'Reilly Media, Incorporated},
	author = {Richards, M. and Ford, N.},
	year = {2020},
}

@book{redmond_seven_2012,
	title = {Seven {Databases} in {Seven} {Weeks}: {A} {Guide} to {Modern} {Databases} and the {NoSQL} {Movement}},
	isbn = {978-1-68050-468-2},
	url = {https://books.google.nl/books?id=YA9QDwAAQBAJ},
	publisher = {Pragmatic Bookshelf},
	author = {Redmond, E. and Wilson, J.},
	year = {2012},
	lccn = {2012472291},
}

@book{erich_gamma_design_1995,
	series = {Addison-{Wesley} professional computing series},
	title = {Design {Patterns}: {Elements} of {Reusable} {Object}-{Oriented} {Software}},
	isbn = {978-3-8273-3043-7},
	url = {https://books.google.nl/books?id=tmNNfSkfTlcC},
	publisher = {Addison-Wesley},
	author = {Erich Gamma, R.H.R.J.J.V. and Gamma, E. and Gamma, E. and Booch, G. and Helm, R. and Johnson, R. and {Addison-Wesley} and Johnson, R.E. and Vlissides, J.},
	year = {1995},
	lccn = {94334264},
}

@book{fowler_peaa,
	series = {A {Martin} {Fowler} signature book},
	title = {Patterns of {Enterprise} {Application} {Architecture}},
	isbn = {978-0-321-12742-6},
	url = {https://books.google.nl/books?id=Jl5rkQnbfAIC},
	publisher = {Addison-Wesley},
	author = {Fowler, M. and Rice, D.},
	year = {2003},
	lccn = {2002027743},
}

@book{hohpe_enterprise_2012,
	series = {Addison-{Wesley} {Signature} {Series} ({Fowler})},
	title = {Enterprise {Integration} {Patterns}: {Designing}, {Building}, and {Deploying} {Messaging} {Solutions}},
	isbn = {978-0-13-306510-7},
	url = {https://www.enterpriseintegrationpatterns.com/},
	publisher = {Pearson Education},
	author = {Hohpe, G. and Woolf, B.},
	year = {2012},
}

@book{fowler_refactoring_2018,
	series = {Addison-{Wesley} {Signature} {Series} ({Fowler})},
	title = {Refactoring: {Improving} the {Design} of {Existing} {Code}},
	isbn = {978-0-13-475770-4},
	url = {https://books.google.nl/books?id=2H1\_DwAAQBAJ},
	publisher = {Pearson Education},
	author = {Fowler, M.},
	year = {2018},
}

@book{freeman_growing_2009,
	series = {Addison-{Wesley} {Signature} {Series} ({Beck})},
	title = {Growing {Object}-{Oriented} {Software}, {Guided} by {Tests}},
	isbn = {978-0-321-69976-3},
	url = {https://books.google.nl/books?id=QJA3dM8Uix0C},
	publisher = {Pearson Education},
	author = {Freeman, S. and Pryce, N.},
	year = {2009},
}

@misc{dhh_majestic_2016,
	title = {The {Majestic} {Monolith}},
	url = {https://m.signalvnoise.com/the-majestic-monolith/},
	abstract = {Monolith by Rene Aigner Some patterns are just about the code. If your code looks like this, and you need it to do that, here’s what to do. You’d do well to study such patterns, as they give you a …},
	language = {en-US},
	urldate = {2022-07-05},
	journal = {Signal v. Noise},
	author = {{DHH}},
	month = feb,
	year = {2016},
	file = {Snapshot:C\:\\Users\\tom.kemper\\Zotero\\storage\\NLDPA4Q6\\the-majestic-monolith.html:text/html},
}

@book{cervantes_designing_2016,
	series = {{SEI} {Series} in {Software} {Engineering}},
	title = {Designing {Software} {Architectures}: {A} {Practical} {Approach}},
	isbn = {978-0-13-439083-3},
	url = {https://books.google.nl/books?id=G30JDAAAQBAJ},
	publisher = {Pearson Education},
	author = {Cervantes, H. and Kazman, R.},
	year = {2016},
}

@book{tanenbaum_distributed_2017,
	title = {Distributed {Systems}},
	isbn = {978-1-5430-5738-6},
	url = {https://www.distributed-systems.net/index.php/books/ds3/},
	publisher = {CreateSpace Independent Publishing Platform},
	author = {Tanenbaum, A.S. and van Steen, M.},
	year = {2017},
	keywords = {TODO},
}

@article{helland_life_2017,
	title = {Life {Beyond} {Distributed} {Transactions}},
	volume = {60},
	issn = {0001-0782},
	doi = {10.1145/3009826},
	abstract = {An apostate's opinion: Building distributed transactions to support highly available applications is a great challenge that has inspired excellent innovation and amazing technology. Unfortunately, this is not broadly available to application developers. In most distributed transaction systems, the failure of a single node causes transaction commit to stall. Hence, many applications are built using techniques that do not provide transactional guarantees but still meet the needs of their business. This article explores and names some of the practical approaches used in the implementation of large-scale mission-critical applications in a world that rejects distributed transactions.},
	number = {2},
	journal = {Communications of the ACM},
	author = {Helland, Pat},
	month = feb,
	year = {2017},
	keywords = {01841 acm paper transaction processing database middleware concurrent optimize},
	pages = {46--54},
}

@misc{richardson_introduction_2015,
	title = {Introduction to {Microservices}},
	url = {https://www.nginx.com/blog/introduction-to-microservices/},
	abstract = {Microservices are currently getting a lot of attention. This blog post is the first in a 7-part series about designing, building, \& deploying microservices.},
	language = {en-US},
	urldate = {2022-07-05},
	journal = {NGINX},
	author = {Richardson, Chris},
	month = may,
	year = {2015},
	file = {Snapshot:C\:\\Users\\tom.kemper\\Zotero\\storage\\PE8JFM3G\\introduction-to-microservices.html:text/html},
}

@misc{infoq_domain_2006,
	title = {Domain {Driven} {Design} {Quickly}},
	url = {https://www.infoq.com/minibooks/domain-driven-design-quickly/},
	abstract = {Domain Driven Design is a vision and approach for designing a domain model  that reflects a deep understanding of the business domain. This book is a short, quickly-readable summary and introduction to the fundamentals of DDD; it does not introduce any new concepts; it attempts to concisely summarize the essence of what DDD is, drawing mostly Eric Evans' book.},
	language = {en},
	urldate = {2022-07-05},
	journal = {InfoQ},
	author = {InfoQ},
	year = {2006},
	file = {Snapshot:C\:\\Users\\tom.kemper\\Zotero\\storage\\ZG9Q32CU\\domain-driven-design-quickly.html:text/html},
}

@misc{boner_reactive_nodate,
	title = {The {Reactive} {Manifesto}},
	url = {https://www.reactivemanifesto.org/},
	urldate = {2022-07-05},
	author = {Bonér and Farley and Kuhn and Thompson},
	file = {The Reactive Manifesto:C\:\\Users\\tom.kemper\\Zotero\\storage\\FSMU3LA5\\www.reactivemanifesto.org.html:text/html},
}

@inproceedings{brewer_towards_2000,
	title = {Towards {Robust} {Distributed} {Systems}.},
	url = {http://www.cs.berkeley.edu/~brewer/cs262b-2004/PODC-keynote.pdf},
	booktitle = {Symposium on {Principles} of {Distributed} {Computing} ({PODC})},
	author = {Brewer, Eric A.},
	year = {2000},
	keywords = {cap nosql},
}

@techreport{terry_replicated_2011,
	title = {Replicated {Data} {Consistency} {Explained} {Through} {Baseball}},
	url = {https://www.microsoft.com/en-us/research/publication/replicated-data-consistency-explained-through-baseball/},
	abstract = {Some cloud storage services, like Windows Azure, replicate data while providing strong consistency to their clients while others, like Amazon, have chosen eventual consistency in order to obtain better performance and availability. A broader class of consistency guarantees can, and perhaps should, be offered to clients that read shared data. During a baseball game, for example, different participants (the scorekeeper, umpire, sportswriter, and so on) benefit from six different consistency guarantees when reading the current score. Eventual consistency is insufficient for most of the participants, but strong consistency is not needed either.},
	number = {MSR-TR-2011-137},
	author = {Terry, Doug},
	month = oct,
	year = {2011},
}
